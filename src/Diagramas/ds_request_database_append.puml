@startuml handle_client
hide footbox
activate Client


participant Client order 10
participant Database order 100
participant Request order 20
participant Dictionary as "dictionary:HashMap" order 120
participant Value as "val:String" order 200
participant Query order 80

    Client -> Request++: parse_request(&mut self.stream: TcpStream)
    return result

    alt result == Ok(request) 
        create Request
        Client -> Request++: new(request, subscriptions_mode)
        return request: Request
        alt request == Request::DataBase
            Client -> Request++:
            create Query
            Request -> Query++:
            return query:Query
        else Request::Server
            Client -> Request:
        else Request::Publisher
            Client -> Request:
        else Request::Suscriber
            Client -> Request:
        else Request::CloseClient
            Client -> Request:
        else Request::Invalid
            Client -> Request:
        end
    end
    
    return query:Query

    Client -> Query++: exec_query(db: Database): Response

        alt query == Query::Append(key: &str, value: &str)
            Query -> Database++: append(key: &str, value: &str): Result<SuccessQuery, DataBaseError>
                Database -> Dictionary++: contains_key(key: &str): bool
                return value_bool
                alt value_bool == true
                    alt Some(StorageValue::String(val)) = dictionary.get_mut(key)
                        Database -> Value++: push_str(value: &str)
                        deactivate Value
                        Database -> Query: Ok(SuccessQuery::Integer(val.lenght()))
                    else Some(_)
                        Database -> Query: Err(DataBaseError::NotAString)
                    end 
                else false
                    Database -> Dictionary++: insert(key: &str, value: &str)
                    deactivate Dictionary
                    Database -> Query: Ok(SuccessQuery::Integer(value.lenght()))
                end     
            return result_query: Result< SuccessQuery, DataBaseError>
        end
    alt result_query == Ok(succes)
        participant Respond as "respond: Response" order 140
        create Respond
        Query -> Respond++: new(succes_msg: &str)
        return respond::Valid
    end
    return respond
@enduml